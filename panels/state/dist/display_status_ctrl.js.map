{"version":3,"sources":["../src/display_status_ctrl.js"],"names":["MetricsPanelCtrl","_","panelDefaults","statusSettings","fontSize","fontWeight","color","textTransform","elementSettings","log","console","msg","x","DisplayStatus","$scope","$injector","defaultsDeep","panel","events","on","onDataReceived","bind","onInitEditMode","getColors","then","allStates","colors","data","setTimeout","state","pluck","length","label","element","name","status","render","scope","elem","attrs","ctrl","find","css","window","opmonColorStatus","Promise","resolve","fetch","credentials","headers","res","json","addEditorTab","templateUrl","keys","obj","reduce","key","updateProperty","property","value","ctx"],"mappings":"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","file":"display_status_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport './css/display-status-panel.css!';\n\nconst panelDefaults = {\n  statusSettings: {\n    fontSize: '60px',\n    fontWeight: 'bold',\n    color: 'white',\n    textTransform: 'uppercase'\n  },\n  elementSettings: {\n    fontSize: '20px',\n    fontWeight: 'normal',\n    color: 'white',\n    textTransform: 'normal'\n  }\n};\n\nconst log = msg => x => (console.log(msg, x), x)\n\nexport class DisplayStatus extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.getColors().then(colors => this.allStates = colors);\n  }\n\n  onDataReceived(data=[]) {\n    if (!this.allStates) {\n      return setTimeout(this.onDataReceived.bind(this, data), 1000)\n    }\n    const state = this.allStates[pluck([0, 'datapoints', 0, 0], data) % this.allStates.length] || { label: 'n/A', color: '#000' }\n\n    this.element = {\n      name: pluck([0, 'target'], data) || 'Element not found'\n    }\n\n    this.status = {\n      label: state.label,\n      color: state.color\n    }\n\n    this.render()\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.events.on('render', () => {\n      elem.find('.panel-container').css('background-color', this.status.color)\n      elem.find('.panel-title').css('color', '#FFF')\n    })\n  }\n\n  getColors() {\n    return (window.opmonColorStatus && window.opmonColorStatus.length > 0)\n      ? Promise.resolve(window.opmonColorStatus)\n      : fetch('/opmon/seagull/www/index.php/opinterface/action/retrieveStateColors', {\n          credentials: 'same-origin',\n          headers: {\n            'X-Requested-With': 'XMLHttpRequest'\n          }\n        })\n        .then(res => res.json())\n        .then(colors => (window.opmonColorStatus = colors, colors))\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/state/editor.html', 2);\n  }\n}\n\nDisplayStatus.templateUrl = 'module.html';\n\nconst pluck = (keys, obj) =>\n  keys.reduce((x, key) => x && x[key], obj)\n\nconst updateProperty = ctx => (scope, property, value) => {\n  ctx[scope][property] = value\n}\n"]}